{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "utcValue": {
      "type": "string",
      "metadata": {
        "description": "Returns the current (UTC) datetime value in the specified format. If no format is provided, the ISO 8601 (yyyyMMddTHHmmssZ) format is used"
      },
      "defaultValue": "[utcNow()]"
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for the Virtual Machine."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "minLength": 12,
      "metadata": {
        "description": "Password for the all Virtual machines. The password must be at least 8 characters in length and must contain at least one digit, one non-alphanumeric character, and one upper or lower case letter"
      }
    },
    "domainUsers": {
      "type": "secureObject",
      "metadata": {
        "description": "Domain users to create after domain is set up."
      },
      "defaultValue": {
        "array": [
          {
            "FirstName": "Bridget",
            "LastName": "Horrarah",
            "SamAccountName": "bhorrarah",
            "Department": "Human Resources",
            "JobTitle": "HR Director",
            "Password": "Jingle4Days!!",
            "Identity": "Users",
            "UserContainer": "DomainUsers"
          },
          {
            "FirstName": "Sandy",
            "LastName": "Silver",
            "SamAccountName": "ssilver",
            "Department": "IT Support",
            "JobTitle": "CIO",
            "Password": "RedFindings1Again!",
            "Identity": "Domain Admins",
            "UserContainer": "DomainUsers"
          },
          {
            "FirstName": "Christopher",
            "LastName": "Liken",
            "SamAccountName": "cliken",
            "Department": "Accounting",
            "JobTitle": "VP",
            "Password": "Broncos40!",
            "Identity": "Users",
            "UserContainer": "DomainUsers"
          },
          {
            "FirstName": "Betty",
            "LastName": "Cleaver",
            "SamAccountName": "bcleaver",
            "Department": "Sales",
            "JobTitle": "Sales Engineer",
            "Password": "LeastFavoriteMonday1!",
            "Identity": "Users",
            "UserContainer": "DomainUsers"
          },
          {
            "FirstName": "Sysmon",
            "LastName": "MS",
            "SamAccountName": "sysmonsvc",
            "Department": "IT Support",
            "JobTitle": "Service Account",
            "Password": "WinterTime2022!",
            "Identity": "Users",
            "UserContainer": "DomainUsers"
          },
          {
            "FirstName": "Nxlog",
            "LastName": "Shipper",
            "SamAccountName": "nxlogsvc",
            "Department": "IT Support",
            "JobTitle": "Service Account",
            "Password": "S3nData!1122",
            "Identity": "Users",
            "UserContainer": "DomainUsers"
          }
        ]
      }
    },
    "remoteAccessMode": {
      "type": "string",
      "metadata": {
        "description": "Allowing access from all Public IPs"
      },
      "defaultValue": "AllowPublicIP",
      "allowedValues": [
        "AllowPublicIP"
      ]
    },
    "allowedIPAddresses": {
      "type": "string",
      "metadata": {
        "description": "The sourceAddressPrefixes allowed to connect to this deployment"
      },
      "defaultValue": "*"
    },
    "domainFQDN": {
      "type": "string",
      "metadata": {
        "description": "The FQDN of the Active Directory Domain to be created"
      },
      "defaultValue": "blacksmith.local"
    },
    "numberOfWorkstations": {
      "type": "int",
      "minValue": 1,
      "maxValue": 100,
      "metadata": {
        "description": "Number of VMs to deploy"
      },
      "defaultValue": 1
    },
    "vmNamePrefix": {
      "type": "string",
      "metadata": {
        "description": "Prefix for the name of your virtual machine. Template will add a number starting from 5."
      },
      "defaultValue": "WORKSTATION"
    },
    "windowsDesktopSKU": {
      "type": "string",
      "defaultValue": "19h2-pro",
      "metadata": {
        "description": "The Windows version for the Desktop VM. This will pick a fully patched image of this given Windows version."
      }
    },
    "windowsDesktopVersion": {
      "type": "string",
      "defaultValue": "latest"
    },
    "windowsServerSKU": {
      "type": "string",
      "defaultValue": "2019-Datacenter",
      "metadata": {
        "description": "The Windows version for the Server VM. This will pick a fully patched image of this given Windows version."
      }
    },
    "windowsServerVersion": {
      "type": "string",
      "defaultValue": "17763.3125.2112070401"
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_B2s",
      "allowedValues": [
        "Standard_A2",
        "Standard_A3",
        "Standard_B2s",
        "Standard_B2ms",
        "Standard_A2_v2",
        "Standard_A4_v2",
        "Standard_DS2",
        "Standard_DS11"
      ],
      "metadata": {
        "description": "Size of the virtual machine. Reference: https://docs.microsoft.com/en-us/azure/virtual-machines/sizes-general"
      }
    },
    "identityType": {
      "type": "string",
      "metadata": {
        "description": "The type of identity used for the virtual machine. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine. - SystemAssigned, UserAssigned, None. Reference: https://docs.microsoft.com/en-us/azure/templates/microsoft.compute/virtualmachines?tabs=json#virtualmachineidentity-object"
      },
      "defaultValue": "None",
      "allowedValues": [
        "SystemAssigned",
        "SystemAssigned",
        "UserAssigned",
        "None"
      ]
    },
    "userAssignedIdentities": {
      "type": "object",
      "metadata": {
        "description": "The list of user identities associated with the Virtual Machine. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}"
      },
      "defaultValue": {}
    },
    "virtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Virtual Network"
      },
      "defaultValue": "vnet-win"
    },
    "virtualNetworkAddressRange": {
      "type": "string",
      "metadata": {
        "description": "Address Range of the virtual network"
      },
      "defaultValue": "192.168.0.0/16"
    },
    "subnetRange": {
      "type": "string",
      "metadata": {
        "description": "Address Range of the subnet"
      },
      "defaultValue": "192.168.2.0/24"
    },
    "subnetName": {
      "type": "string",
      "metadata": {
        "description": "Name of the subnet"
      },
      "defaultValue": "snet-win"
    },
    "enableSysmon": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Do you want to install Sysmon on the endpoint?"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    }
  },
  "variables": {
    "storageAccountName": "[concat(uniquestring(resourceGroup().id, parameters('utcValue')))]",

    // Virtual Network Setup
    "virtualNetworkName": "[parameters('virtualNetworkName')]",
    "virtualNetworkAddressRange": "[parameters('virtualNetworkAddressRange')]",
    "subnetName": "[parameters('subnetName')]",
    "subnetRange": "[parameters('subnetRange')]",
    "vmPrivateIPPrefixArray": "[take(split(variables('subnetRange'),'.'),3)]",
    "vmPrivateIPAddresPrefix": "[format('{0}.{1}.{2}.',variables('vmPrivateIPPrefixArray')[0], variables('vmPrivateIPPrefixArray')[1], variables('vmPrivateIPPrefixArray')[2])]",
    "subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetName'))]",
    "nsg-default-name": "nsg-rdp-allow",
    "nsg-id": {
      "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg-default-name'))]"
    },
    "networkSecurityGroup": "[if(equals(parameters('remoteAccessMode'), 'AllowPublicIP'), variables('nsg-id'), json('null'))]",
    "subnets": [
      {
        "name": "[variables('subnetName')]",
        "properties": {
          "addressPrefix": "[variables('subnetRange')]",
          "networkSecurityGroup": "[variables('networkSecurityGroup')]"
        }
      }
    ],

    "allSubnets": "[variables('subnets')]",

    // Nested Templates
    "updateDNSServerScript": "https://github.com/AntiSyphon/asazlab/raw/main/1-AD/templates/vnet-dns-server.json",
    "sysmonInstallTemplateUri": "https://github.com/AntiSyphon/asazlab/raw/main/1-AD/templates/sysmonInstall.json",
    "createADTemplateUri": "https://github.com/AntiSyphon/asazlab/raw/main/1-AD/templates/createADForest.json",
    "AddADUsersuri": "https://github.com/AntiSyphon/asazlab/raw/main/1-AD/templates/AddADUsers.json",
    "joinDomainTemplateUri": "https://github.com/AntiSyphon/asazlab/raw/main/1-AD/templates/joinDomain.json",
    "badbloodTemplateUri": "https://github.com/AntiSyphon/asazlab/raw/main/1-AD/templates/badblood.json",
    "SPNTemplateUri": "https://github.com/AntiSyphon/asazlab/raw/main/1-AD/templates/addspns.json",
    "FileSharesTemplateUri": "https://github.com/AntiSyphon/asazlab/raw/main/1-AD/templates/fileshares.json",


    // Custom Scripts
    "initialSettingsScript": "https://github.com/AntiSyphon/asazlab/raw/main/1-AD/scripts/1-vmbootstrap/1-Set-Initial-Settings.ps1",
    "dscModules": "https://github.com/AntiSyphon/asazlab/raw/main/1-AD/scripts/1-vmbootstrap/2-Install-DSC-Modules.ps1",
    "prepareBoxScript": "https://github.com/AntiSyphon/asazlab/raw/main/1-AD/scripts/1-vmbootstrap/3-Prepare-Box.ps1",
    "setSecurityAuditingScript": "https://github.com/AntiSyphon/asazlab/raw/main/1-AD/scripts/1-vmbootstrap/4-Enable-WinAuditCategories.ps1",
    "setPowerShellLogging": "https://github.com/AntiSyphon/asazlab/raw/main/1-AD/scripts/1-vmbootstrap/5-Enable-PowerShell-Logging.ps1",
    "saclModule": "https://github.com/AntiSyphon/asazlab/raw/main/1-AD/scripts/1-vmbootstrap/Set-AuditRule.ps1",
    "setSACLScript": "https://github.com/AntiSyphon/asazlab/raw/main/1-AD/scripts/1-vmbootstrap/6-Set-SACLs.ps1",
    "setWallPaperScript": "https://github.com/AntiSyphon/asazlab/raw/main/1-AD/scripts/1-vmbootstrap/7-Set-WallPaper.ps1",
    "DisableDefender": "https://github.com/AntiSyphon/asazlab/raw/main/1-AD/scripts/1-vmbootstrap/8-disable-defender.ps1",


    // Powershell DSC Scripts
    "createADForestScript": "https://github.com/AntiSyphon/asazlab/raw/main/1-AD/DSC/Create-AD.zip",
    "AddUsersScript": "https://github.com/AntiSyphon/asazlab/raw/main/1-AD/DSC/AddUsers1.zip",
    "joinDomainScript": "https://github.com/AntiSyphon/asazlab/raw/main/1-AD/DSC/Join-Domain.zip",
    "installSysmonScript": "https://github.com/AntiSyphon/asazlab/raw/main/1-AD/DSC/Install-Sysmon.zip",
    "badbloodScript": "https://github.com/AntiSyphon/asazlab/raw/main/1-AD/DSC/badblood.zip",
    "spnsScript": "https://github.com/AntiSyphon/asazlab/raw/main/1-AD/DSC/spns.zip",
    "filesharesScript": "https://github.com/AntiSyphon/asazlab/raw/main/1-AD/DSC/fileshares.zip",

    // Initial Setup Scripts
    "initialSetUpScripts": [
      "[variables('initialSettingsScript')]",
      "[variables('dscModules')]",
      "[variables('prepareBoxScript')]",
      "[variables('setSecurityAuditingScript')]",
      "[variables('setPowerShellLogging')]",
      "[variables('saclModule')]",
      "[variables('setSACLScript')]",
      "[variables('setWallPaperScript')]",
      "[variables('DisableDefender')]"
    ],

    // Virtual Machine Properties
    "copy": [
      {
        "name": "allWinWKS",
        "count": "[parameters('numberOfWorkstations')]",
        "input": {
          "tag": "workstation",
          "vmName": "[concat(parameters('vmNamePrefix'),copyIndex('allWinWKS',5))]",
          "os": "windows",
          "subnetref": "[variables('subnetRef')]",
          "ipAddress": "[concat(variables('vmPrivateIPAddresPrefix'),copyIndex('allWinWKS',100))]",
          "vmSize": "[parameters('vmSize')]",
          "publisher": "MicrosoftWindowsDesktop",
          "offer": "Windows-10",
          "sku": "win10-21h2-pro",
          "version": "latest",
          "extensionName": "SetupWinVM"
        }
      }
    ],
    "domainController": [
      {
        "tag": "domainController",
        "vmName": "DC01",
        "os": "windows",
        "subnetref": "[variables('subnetRef')]",
        "ipAddress": "[concat(variables('vmPrivateIPAddresPrefix'),'4')]",
        "vmSize": "[parameters('vmSize')]",
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2019-Datacenter",
        "version": "17763.3125.2112070401",
        "extensionName": "SetUpDC"
      }
    ],
    "MemberServer": [
      {
        "tag": "memberserver",
        "vmName": "SRV01",
        "os": "windows",
        "subnetref": "[variables('subnetRef')]",
        "ipAddress": "[concat(variables('vmPrivateIPAddresPrefix'),'10')]",
        "vmSize": "[parameters('vmSize')]",
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2019-Datacenter",
        "version": "17763.3125.2112070401",
        "extensionName": "SetupSrvVM"
      }
    ],

    // Additional Variables
    "allEndpoints": "[concat(variables('allWinWKS'), variables('domainController'), variables('MemberServer'))]",
    "domainNameArray": "[split(parameters('domainFQDN'),'.')]",
    "ouPath": "[concat('OU=Workstations; DC=', variables('domainNameArray')[0], '; DC=', variables('domainNameArray')[1])]",

    // Managed Identity
    "identityType": { "type": "[parameters('identityType')]" },
    "userAssignedIdentities": { "userAssignedIdentities": "[parameters('userAssignedIdentities')]" },
    "identity": "[if(empty(parameters('userAssignedIdentities')), variables('identityType'), union(variables('identityType'), variables('userAssignedIdentities')))]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2018-11-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "Storage",
      "properties": {}
    },
    {
      "comments": "Default Network Security Group for Windows endpoints",
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2019-08-01",
      "name": "[variables('nsg-default-name')]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "default-allow-3389",
            "properties": {
              "priority": 100,
              "access": "Allow",
              "direction": "Inbound",
              "destinationPortRange": "3389",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "[parameters('allowedIPAddresses')]",
              "destinationAddressPrefix": "*"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2019-02-01",
      "name": "[variables('virtualNetworkName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg-default-name'))]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('virtualNetworkAddressRange')]"
          ]
        },
        "subnets": "[variables('allSubnets')]"
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2018-11-01",
      "name": "[concat('pip-', variables('allEndpoints')[copyIndex('vmPublicIpCopy')].vmName)]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "vmPublicIpCopy",
        "count": "[length(variables('allEndpoints'))]"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[toLower(concat(variables('allEndpoints')[copyIndex('vmPublicIpCopy')].vmName, '-', uniquestring(resourceGroup().id, parameters('utcValue'))))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2019-11-01",
      "name": "[concat('nic-', variables('allEndpoints')[copyIndex('vmNetworkInterfaceCopy')].vmName)]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip-', variables('allEndpoints')[copyIndex('vmNetworkInterfaceCopy')].vmName))]",
        "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "copy": {
        "name": "vmNetworkInterfaceCopy",
        "count": "[length(variables('allEndpoints'))]"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables('allEndpoints')[copyIndex('vmNetworkInterfaceCopy')].ipAddress]",
              "publicIPAddress": "[if(equals(parameters('remoteAccessMode'),'AllowPublicIP'), json(concat('{\"id\":', '\"', resourceId('Microsoft.Network/publicIPAddresses/', concat('pip-', variables('allEndpoints')[copyIndex('vmNetworkInterfaceCopy')].vmName)),'\"}')),json('null'))]",
              "subnet": {
                "id": "[variables('allEndpoints')[copyIndex('vmNetworkInterfaceCopy')].subnetref]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2018-10-01",
      "name": "[variables('allEndpoints')[copyIndex('vmVMCopy')].vmName]",
      "location": "[parameters('location')]",
      "identity": "[variables('identity')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
        "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic-', variables('allEndpoints')[copyIndex('vmVMCopy')].vmName))]"
      ],
      "copy": {
        "name": "vmVMCopy",
        "count": "[length(variables('allEndpoints'))]"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('allEndpoints')[copyIndex('vmVMCopy')].vmSize]"
        },
        "osProfile": {
          "computerName": "[variables('allEndpoints')[copyIndex('vmVMCopy')].vmName]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('allEndpoints')[copyIndex('vmVMCopy')].publisher]",
            "offer": "[variables('allEndpoints')[copyIndex('vmVMCopy')].offer]",
            "sku": "[variables('allEndpoints')[copyIndex('vmVMCopy')].sku]",
            "version": "[variables('allEndpoints')[copyIndex('vmVMCopy')].version]"
          },
          "osDisk": {
            "createOption": "FromImage"
          },
          "dataDisks": []
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat('nic-', variables('allEndpoints')[copyIndex('vmVMCopy')].vmName))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
          }
        }
      }
    },
    {
      "name": "[concat(variables('allWinWKS')[copyIndex('InitialSetUpWKSCopy')].vmName, '/', variables('allWinWKS')[copyIndex('InitialSetUpWKSCopy')].extensionName)]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2019-12-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('allWinWKS')[copyIndex('InitialSetUpWKSCopy')].vmName)]"
      ],
      "copy": {
        "name": "InitialSetUpWKSCopy",
        "count": "[length(variables('allWinWKS'))]"
      },
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "CustomScriptExtension",
        "typeHandlerVersion": "1.8",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": "[variables('initialSetUpScripts')]",
          "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -File ./1-Set-Initial-Settings.ps1',' ','-SetupType Endpoint')]"
        },
        "protectedSettings": {}
      }
    },
    {
      "name": "[concat(variables('domainController')[0].vmName, '/', variables('domainController')[0].extensionName)]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2019-12-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/', variables('domainController')[0].vmName)]"
      ],
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "CustomScriptExtension",
        "typeHandlerVersion": "1.8",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": "[variables('initialSetUpScripts')]",
          "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -File ./1-Set-Initial-Settings.ps1',' ','-SetupType DC')]"
        },
        "protectedSettings": {}
      }
    },
    {
      "name": "[concat(variables('MemberServer')[0].vmName, '/', variables('MemberServer')[0].extensionName)]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2019-12-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/', variables('MemberServer')[0].vmName)]"
      ],
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "CustomScriptExtension",
        "typeHandlerVersion": "1.8",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": "[variables('initialSetUpScripts')]",
          "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -File ./1-Set-Initial-Settings.ps1',' ','-SetupType Endpoint')]"
        },
        "protectedSettings": {}
      }
    },
    {
      "name": "CreateADForest",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('domainController')[0].vmName, variables('domainController')[0].extensionName)]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('createADTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "vmName": {
            "value": "[variables('domainController')[0].vmName]"
          },
          "createADForestScript": {
            "value": "[variables('createADForestScript')]"
          },
          "domainFQDN": {
            "value": "[parameters('domainFQDN')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "domainUsers": {
            "value": "[parameters('domainUsers')]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        }
      }
    },
    {
      "name": "AddADUsers",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "dependsOn": [
        "UpdateVNetDNS"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('AddADUsersuri')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "vmName": {
            "value": "[variables('domainController')[0].vmName]"
          },
          "AddUsersScript": {
            "value": "[variables('AddUsersScript')]"
          },
          "domainFQDN": {
            "value": "[parameters('domainFQDN')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        }
      }
    },
    {
      "name": "Badblood",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "dependsOn": [
        "AddFileshares"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('badbloodTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "vmName": {
            "value": "[variables('domainController')[0].vmName]"
          },
          "badbloodScript": {
            "value": "[variables('badbloodScript')]"
          },
          "domainFQDN": {
            "value": "[parameters('domainFQDN')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        }
      }
    },
    {
      "name": "AddSPNs",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "dependsOn": [
        "AddADUsers"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('SPNTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "vmName": {
            "value": "[variables('domainController')[0].vmName]"
          },
          "spnsScript": {
            "value": "[variables('spnsScript')]"
          },
          "domainFQDN": {
            "value": "[parameters('domainFQDN')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        }
      }
    },
    {
      "name": "SRV01-Fileshares",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "dependsOn": [
        "SRV01-joinDomain"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('FileSharesTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "vmName": {
            "value": "[variables('MemberServer')[0].vmName]"
          },
          "filesharesScript": {
            "value": "[variables('filesharesScript')]"
          },
          "domainFQDN": {
            "value": "[parameters('domainFQDN')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        }
      }
    },
    {
      "name": "UpdateVNetDNS",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "dependsOn": [
        "CreateADForest"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('updateDNSServerScript')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "virtualNetworkName": {
            "value": "[variables('virtualNetworkName')]"
          },
          "virtualNetworkAddressRange": {
            "value": "[variables('virtualNetworkAddressRange')]"
          },
          "subnets": {
            "value": "[variables('allSubnets')]"
          },
          "DNSServerAddress": {
            "value": [
              "[variables('domainController')[0].ipAddress]"
            ]
          },
          "location": {
            "value": "[parameters('location')]"
          }
        }
      }
    },
    {
      "name": "[concat(variables('allWinWKS')[copyIndex('vmDomainJoinCopy')].vmName, '-joinDomain')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "dependsOn": [
        "InitialSetUpWKSCopy",
        "UpdateVNetDNS"
      ],
      "copy": {
        "name": "vmDomainJoinCopy",
        "count": "[length(variables('allWinWKS'))]"
      },
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('joinDomainTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "vmName": {
            "value": "[variables('allWinWKS')[copyIndex('vmDomainJoinCopy')].vmName]"
          },
          "joinDomainScript": {
            "value": "[variables('joinDomainScript')]"
          },
          "domainFQDN": {
            "value": "[parameters('domainFQDN')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "dcIpAddress": {
            "value": "[variables('domainController')[0].ipAddress]"
          },
          "joinOU": {
            "value": "[variables('ouPath')]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        }
      }
    },
    {
      "name": "[concat(variables('memberserver')[0].vmName, '-joinDomain')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('memberserver')[0].vmName, variables('memberserver')[0].extensionName)]",
        "UpdateVNetDNS"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('joinDomainTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "vmName": {
            "value": "[variables('memberserver')[0].vmName]"
          },
          "joinDomainScript": {
            "value": "[variables('joinDomainScript')]"
          },
          "domainFQDN": {
            "value": "[parameters('domainFQDN')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "dcIpAddress": {
            "value": "[variables('domainController')[0].ipAddress]"
          },
          "joinOU": {
            "value": "[variables('ouPath')]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        }
      }
    },
    {
      "condition": "[parameters('enableSysmon')]",
      "name": "[concat(variables('allWinWKS')[copyIndex('vmSysmonSetUpCopy')].vmName, '-installSysmon')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "dependsOn": [
        "vmDomainJoinCopy"
      ],
      "copy": {
        "name": "vmSysmonSetupCopy",
        "count": "[length(variables('allWinWKS'))]"
      },
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('sysmonInstallTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "vmName": {
            "value": "[variables('allWinWKS')[copyIndex('vmSysmonSetupCopy')].vmName]"
          },
          "installSysmonScript": {
            "value": "[variables('installSysmonScript')]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        }
      }
    },
    {
      "condition": "[parameters('enableSysmon')]",
      "name": "[concat(variables('domainController')[0].vmName, '-installSysmon')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "dependsOn": [
        "Badblood"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('sysmonInstallTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "vmName": {
            "value": "[variables('domainController')[0].vmName]"
          },
          "installSysmonScript": {
            "value": "[variables('installSysmonScript')]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        }
      }
    },
    {
      "condition": "[parameters('enableSysmon')]",
      "name": "[concat(variables('memberserver')[0].vmName, '-installSysmon')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "dependsOn": [
        "SRV01-Fileshares"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('sysmonInstallTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "vmName": {
            "value": "[variables('memberserver')[0].vmName]"
          },
          "installSysmonScript": {
            "value": "[variables('installSysmonScript')]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        }
      }
    }
  ],
  "outputs": {
    "virtualNetworkName": {
      "type": "string",
      "value": "[variables('virtualNetworkName')]"
    },
    "virtualNetworkId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
    },
    "allWinVMsDeployed": {
      "type": "array",
      "value": "[variables('allEndpoints')]"
    },
    "DCPublicIP": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses','pip-DC01')).IpAddress]"
    },
    "WSPublicIP": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses','pip-WS05')).IpAddress]"
    }
  }
}
